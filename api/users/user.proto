syntax = "proto3";
option go_package="github.com/les-cours/user-service/api/users";
package users;

message Empty {}


/*
    STUDENTS
 */
message Students {
    repeated Student students = 1;
}
message GetStudentsRequest{
     string filterType = 1;  //all,grad,subject,classroom
     string filterValue = 2;
}
message GetStudentRequest {
    string studentID = 2;
}

message UpdateStudentStatusRequest {
    string studentID= 1;
    bool status = 2;
}
message StudentUpdateRequest {
    string studentID = 1;
    string username = 3;
    string firstname = 4;
    string lastname = 5;
    string email = 6;
    uint32 roleID = 7;
}
message DeleteStudentRequest {
    string studentID = 1;
}
message MultiStudentsDeleteRequest{
    repeated string studentIDs = 1;
}
message Student {
    string student_id = 2;
    string username = 3;
    string firstname = 5;
    string lastname = 6;
    string gender = 7;
    string dateOfBirth = 8;
    string status = 9;
    string avatar = 10;
    bool notificationStatus = 11;
    bool onlineStatus = 12;
    string defaultAvatar = 13;
    string city_id = 14;
}
message UpdateStudentStatusResponse {
    string studentID = 1;
    bool status = 2;
}
message UserPasswordResetRequest{
  string userID = 1;
  string oldPassword = 2;
  string newPassword = 3;
}
message StudentPasswordResetResponse{
  bool success = 1;
  string error = 2; 
}
message UpdateStudentOnlineStatusRequest{
    string studentID = 1;
    bool onlineStatus = 2;
}
message StudentSignupRequest {
    string firstname = 1;
    string lastname = 2;
    string email = 3;
    string password = 4;
    string dob = 5;
    string gender = 6;
    string gradID = 7;
    int32 cityID = 8;
}
message StudentSignupResponse {
    bool succeeded = 1;
    AccessToken accessToken = 2;
    RefreshToken refreshToken = 3;
    SignupToken signupToken = 4;
}

message EmailConfirmationRequest {
    string accountID = 1;
    int64 code  = 2;
}


message GetUserByIDRequest {
    string accountID = 1;
}
message User {
        string id = 1;
        string accountID= 2;
        string username = 3;
        string firstName = 4;
        string lastName = 5;
        string email = 6;
        Plan plan = 8;
        repeated string allowedIPS = 9;
        string department = 10;
        string avatar = 11;
        Permissions Permissions = 12;
        string userType = 13;
}
message GetUserRequest {
    string username = 1;
    string password = 2;
    bool isTeacher = 3;
}
message ResetPasswordRequest {
    string email = 1;
}
message ResetPasswordResponse {
    string success = 1;
    string error = 2;
}
message PasswordResetLinkHealthRequest {
    string linkID = 1;
}
message PasswordResetLinkHealthResponse {
    string error = 1;
    bool dead = 2;
}
message PasswordChangeByLinkRequest {
    string linkID = 1;
    string password = 2;
}
message PasswordChangeByLinkResponse {
    string error = 1;
    string success = 2;
}
message DoesEmailExistRequest {
    string type = 1;
    string email = 2;
}
message DoesEmailExistResponse {
    bool exists = 1;
}
message DoesUserNameExistRequest {
    string username = 2;
}
message DoesUserNameExistResponse {
    bool exists = 1;
}
message AccessToken {
  string token = 1;
  int64 expiresAt = 2;
  string tokenType = 3;
}
message RefreshToken {
  string token = 1;
  int64 expiresAt = 2;
}
message SignupToken {
  string token = 1;
  int64 expiresAt = 2;
}
message IsSignupLinkValidRequest {
    string token = 1;
}
message IsSignupLinkValidResponse {
    bool isValid = 1;
}
message UserDetails{
    string accountID = 1;
    string email = 2;
}


message Teacher {
    string teacherID = 2;
    string username = 3;
    string firstname = 5;
    string lastname = 6;
    string email = 7;
}
message  Teachers {
    repeated Teacher teachers =1;
}

message TeacherSignupRequest {
    string teacherID = 1;
    string firstname = 2;
    string lastname = 3;
    string password = 4;
}
message TeacherSignupResponse{
    string token = 1;
}

message InviteTeacherRequest {
    string email = 1;
    repeated  string subjects = 2;
}

message GetTeacherBySubjectRequest{
    string subjectID = 1;
}
message OperationStatus {
    bool completed = 1;
}
message Profile {
	string id = 1;
	string accountID = 2;
	string name = 3;
    string phone = 4;
    string email = 5;
    string address = 6;
    string gender = 7;
    string company = 8;
    string job = 9;
    string lastSeen = 10;
    string lastChat = 11;
    repeated ProfileNotification notifications = 12;
}
message ProfileNotification {
    string id = 1;
    string content = 3;
}
message Notification  {
  string id = 1 ;      
	string title = 2;
	int64 timestamp = 3;       
	string content = 4;
	string category = 6;   
  string type = 7;

}
message GetNotificationsRequest {
    string AccountID = 1;
    int32 count = 3;
    int32 skip = 4;
}
message GetNotificationsResponse {
    repeated Notification notifications = 1;
}
message Plan {
    string planID = 1;
    string name = 2;
    int64 periodEndAt = 3;
    bool active = 4;
    string require = 5;
}
message Permissions {
    int32 id = 1;
    bool writeComment =2;
    bool live =3;
    bool settings =4;
    string accountID = 5;
}

service UserService {
    rpc GetStudents(GetStudentsRequest) returns (Students) {}
    rpc GetStudent(GetStudentRequest) returns (Student) {}
    rpc UpdateStudentStatus(UpdateStudentStatusRequest) returns (UpdateStudentStatusResponse) {}
    rpc UpdateStudent(StudentUpdateRequest) returns (Student) {}
    rpc DeleteStudent(DeleteStudentRequest) returns (OperationStatus) {}
    rpc DeleteStudents(MultiStudentsDeleteRequest) returns (OperationStatus) {}
    rpc UpdateStudentOnlineStatus(UpdateStudentOnlineStatusRequest)returns (OperationStatus){}
    rpc StudentSignup(StudentSignupRequest) returns (StudentSignupResponse) {}
    rpc EmailConfirmation(EmailConfirmationRequest)returns (OperationStatus) {}
    /*
         TEACHER
     */

    rpc InviteTeacher(InviteTeacherRequest) returns (OperationStatus) {}
    rpc TeacherSignup(TeacherSignupRequest) returns (TeacherSignupResponse) {}
    rpc GetTeacherBySubject(GetTeacherBySubjectRequest) returns (Teachers) {}

    /*
         USER
     */

    rpc GetUser(GetUserRequest) returns (User) {}
    rpc GetUserByID(GetUserByIDRequest) returns (User) {}
    rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse) {}
    rpc PasswordResetLinkHealth(PasswordResetLinkHealthRequest) returns (PasswordResetLinkHealthResponse) {}
    rpc ChangePasswordByLink(PasswordChangeByLinkRequest) returns (PasswordChangeByLinkResponse) {}
    rpc DoesEmailExist(DoesEmailExistRequest) returns (DoesEmailExistResponse) {}
    rpc DoesUserNameExist(DoesUserNameExistRequest) returns (DoesUserNameExistResponse) {}
    rpc IsSignupLinkValid(IsSignupLinkValidRequest) returns (IsSignupLinkValidResponse) {}
    rpc UserPasswordReset(UserPasswordResetRequest)returns (OperationStatus){}

}
