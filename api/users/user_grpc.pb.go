// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/users/user.proto

package users

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	GetStudents(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*Students, error)
	GetStudent(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*Student, error)
	GetStudentsByDepartment(ctx context.Context, in *GetStudentsByDepartmentRequest, opts ...grpc.CallOption) (*Students, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*User, error)
	AddStudent(ctx context.Context, in *StudentAddRequest, opts ...grpc.CallOption) (*Student, error)
	UpdateStudentStatus(ctx context.Context, in *UpdateStudentStatusRequest, opts ...grpc.CallOption) (*UpdateStudentStatusResponse, error)
	UpdateStudent(ctx context.Context, in *StudentUpdateRequest, opts ...grpc.CallOption) (*Student, error)
	DeleteStudent(ctx context.Context, in *DeleteStudentRequest, opts ...grpc.CallOption) (*StudentID, error)
	DeleteStudents(ctx context.Context, in *MultiStudentsDeleteRequest, opts ...grpc.CallOption) (*OperationStatus, error)
	GetVisitors(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*Visitors, error)
	GetVisitor(ctx context.Context, in *VisitorReq, opts ...grpc.CallOption) (*Visitor, error)
	VisitorExists(ctx context.Context, in *VisitorReq, opts ...grpc.CallOption) (*VisitorExistsRes, error)
	AddVisitor(ctx context.Context, in *Visitor, opts ...grpc.CallOption) (*Visitor, error)
	GetDepartments(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*Departments, error)
	GetDepartment(ctx context.Context, in *GetDepartmentRequest, opts ...grpc.CallOption) (*Department, error)
	AddDepartment(ctx context.Context, in *AddDepartmentRequest, opts ...grpc.CallOption) (*Department, error)
	UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*Department, error)
	UpdateDepartmentStatus(ctx context.Context, in *UpdateStatusDepartment, opts ...grpc.CallOption) (*Department, error)
	DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*DepartmentID, error)
	DeleteDepartments(ctx context.Context, in *MultiDeleteRequest, opts ...grpc.CallOption) (*OperationStatus, error)
	GetCustomer(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*Customer, error)
	AddCustomerAccount(ctx context.Context, in *CustomerAccount, opts ...grpc.CallOption) (*CustomerAccount, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	PasswordResetLinkHealth(ctx context.Context, in *PasswordResetLinkHealthRequest, opts ...grpc.CallOption) (*PasswordResetLinkHealthResponse, error)
	ChangePasswordByLink(ctx context.Context, in *PasswordChangeByLinkRequest, opts ...grpc.CallOption) (*PasswordChangeByLinkResponse, error)
	Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error)
	GetInvites(ctx context.Context, in *GetInvitesRequest, opts ...grpc.CallOption) (*GetInvitesResponse, error)
	CancelInvite(ctx context.Context, in *CancelInviteRequest, opts ...grpc.CallOption) (*CancelInviteResponse, error)
	UpdateCompanyDetails(ctx context.Context, in *UpdateCompanyDetailsRequest, opts ...grpc.CallOption) (*UpdateCompanyDetailsResponse, error)
	StudentSignup(ctx context.Context, in *StudentSignupRequest, opts ...grpc.CallOption) (*StudentSignupResponse, error)
	DoesEmailExist(ctx context.Context, in *DoesEmailExistRequest, opts ...grpc.CallOption) (*DoesEmailExistResponse, error)
	DoesUserNameExist(ctx context.Context, in *DoesUserNameExistRequest, opts ...grpc.CallOption) (*DoesUserNameExistResponse, error)
	SendInstallationCodeToDev(ctx context.Context, in *SendInstallationCodeToDevRequest, opts ...grpc.CallOption) (*SendInstallationCodeToDevResponse, error)
	InviteStudents(ctx context.Context, in *InviteStudentsRequest, opts ...grpc.CallOption) (*InviteStudentsResponse, error)
	GenerateShareableLink(ctx context.Context, in *GenerateShareableLinkRequest, opts ...grpc.CallOption) (*GenerateShareableLinkResponse, error)
	IsSignupLinkValid(ctx context.Context, in *IsSignupLinkValidRequest, opts ...grpc.CallOption) (*IsSignupLinkValidResponse, error)
	GetRooms(ctx context.Context, in *GetRoomsRequest, opts ...grpc.CallOption) (*Rooms, error)
	GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*Room, error)
	GetPreviousRooms(ctx context.Context, in *GetPreviousRoomsRequest, opts ...grpc.CallOption) (*GetPreviousRoomsResponse, error)
	GetRoomsByUsers(ctx context.Context, in *GetRoomsByUsersRequest, opts ...grpc.CallOption) (*Rooms, error)
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error)
	GetSearchMessages(ctx context.Context, in *GetSearchMessagesRequest, opts ...grpc.CallOption) (*Messages, error)
	GetForm(ctx context.Context, in *GetFormRequest, opts ...grpc.CallOption) (*GetFormResponse, error)
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error)
	GetProfiles(ctx context.Context, in *GetProfilesRequest, opts ...grpc.CallOption) (*GetProfilesResponse, error)
	AddProfile(ctx context.Context, in *AddProfileRequest, opts ...grpc.CallOption) (*AddProfileResponse, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	DeleteProfile(ctx context.Context, in *DeleteProfileRequest, opts ...grpc.CallOption) (*DeleteProfileResponse, error)
	GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error)
	GetAccounts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Accounts, error)
	StudentPasswordReset(ctx context.Context, in *StudentPasswordResetRequest, opts ...grpc.CallOption) (*OperationStatus, error)
	GetAccountInfo(ctx context.Context, in *GetAccountInfoRequest, opts ...grpc.CallOption) (*GetAccountInfoResponse, error)
	AddNewsletterEmail(ctx context.Context, in *AddNewsletterEmailRequest, opts ...grpc.CallOption) (*AddNewsletterEmailResponse, error)
	DeleteNewsletterEmail(ctx context.Context, in *DeleteNewsletterEmailRequest, opts ...grpc.CallOption) (*DeleteNewsletterEmailResponse, error)
	SaveGetInTouch(ctx context.Context, in *SaveGetInTouchRequest, opts ...grpc.CallOption) (*SaveGetInTouchResponse, error)
	UpdateStudentOnlineStatus(ctx context.Context, in *UpdateStudentOnlineStatusRequest, opts ...grpc.CallOption) (*OperationStatus, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetStudents(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*Students, error) {
	out := new(Students)
	err := c.cc.Invoke(ctx, "/users.UserService/GetStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetStudent(ctx context.Context, in *GetStudentRequest, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/users.UserService/GetStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetStudentsByDepartment(ctx context.Context, in *GetStudentsByDepartmentRequest, opts ...grpc.CallOption) (*Students, error) {
	out := new(Students)
	err := c.cc.Invoke(ctx, "/users.UserService/GetStudentsByDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/users.UserService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByID(ctx context.Context, in *GetUserByIDRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/users.UserService/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddStudent(ctx context.Context, in *StudentAddRequest, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/users.UserService/AddStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateStudentStatus(ctx context.Context, in *UpdateStudentStatusRequest, opts ...grpc.CallOption) (*UpdateStudentStatusResponse, error) {
	out := new(UpdateStudentStatusResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/UpdateStudentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateStudent(ctx context.Context, in *StudentUpdateRequest, opts ...grpc.CallOption) (*Student, error) {
	out := new(Student)
	err := c.cc.Invoke(ctx, "/users.UserService/UpdateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteStudent(ctx context.Context, in *DeleteStudentRequest, opts ...grpc.CallOption) (*StudentID, error) {
	out := new(StudentID)
	err := c.cc.Invoke(ctx, "/users.UserService/DeleteStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteStudents(ctx context.Context, in *MultiStudentsDeleteRequest, opts ...grpc.CallOption) (*OperationStatus, error) {
	out := new(OperationStatus)
	err := c.cc.Invoke(ctx, "/users.UserService/DeleteStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetVisitors(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*Visitors, error) {
	out := new(Visitors)
	err := c.cc.Invoke(ctx, "/users.UserService/GetVisitors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetVisitor(ctx context.Context, in *VisitorReq, opts ...grpc.CallOption) (*Visitor, error) {
	out := new(Visitor)
	err := c.cc.Invoke(ctx, "/users.UserService/GetVisitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) VisitorExists(ctx context.Context, in *VisitorReq, opts ...grpc.CallOption) (*VisitorExistsRes, error) {
	out := new(VisitorExistsRes)
	err := c.cc.Invoke(ctx, "/users.UserService/VisitorExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddVisitor(ctx context.Context, in *Visitor, opts ...grpc.CallOption) (*Visitor, error) {
	out := new(Visitor)
	err := c.cc.Invoke(ctx, "/users.UserService/AddVisitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetDepartments(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*Departments, error) {
	out := new(Departments)
	err := c.cc.Invoke(ctx, "/users.UserService/GetDepartments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetDepartment(ctx context.Context, in *GetDepartmentRequest, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/users.UserService/GetDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddDepartment(ctx context.Context, in *AddDepartmentRequest, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/users.UserService/AddDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/users.UserService/UpdateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateDepartmentStatus(ctx context.Context, in *UpdateStatusDepartment, opts ...grpc.CallOption) (*Department, error) {
	out := new(Department)
	err := c.cc.Invoke(ctx, "/users.UserService/UpdateDepartmentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*DepartmentID, error) {
	out := new(DepartmentID)
	err := c.cc.Invoke(ctx, "/users.UserService/DeleteDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteDepartments(ctx context.Context, in *MultiDeleteRequest, opts ...grpc.CallOption) (*OperationStatus, error) {
	out := new(OperationStatus)
	err := c.cc.Invoke(ctx, "/users.UserService/DeleteDepartments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetCustomer(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/users.UserService/GetCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddCustomerAccount(ctx context.Context, in *CustomerAccount, opts ...grpc.CallOption) (*CustomerAccount, error) {
	out := new(CustomerAccount)
	err := c.cc.Invoke(ctx, "/users.UserService/AddCustomerAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) PasswordResetLinkHealth(ctx context.Context, in *PasswordResetLinkHealthRequest, opts ...grpc.CallOption) (*PasswordResetLinkHealthResponse, error) {
	out := new(PasswordResetLinkHealthResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/PasswordResetLinkHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangePasswordByLink(ctx context.Context, in *PasswordChangeByLinkRequest, opts ...grpc.CallOption) (*PasswordChangeByLinkResponse, error) {
	out := new(PasswordChangeByLinkResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/ChangePasswordByLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error) {
	out := new(SignupResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/Signup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetInvites(ctx context.Context, in *GetInvitesRequest, opts ...grpc.CallOption) (*GetInvitesResponse, error) {
	out := new(GetInvitesResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/GetInvites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CancelInvite(ctx context.Context, in *CancelInviteRequest, opts ...grpc.CallOption) (*CancelInviteResponse, error) {
	out := new(CancelInviteResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/CancelInvite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateCompanyDetails(ctx context.Context, in *UpdateCompanyDetailsRequest, opts ...grpc.CallOption) (*UpdateCompanyDetailsResponse, error) {
	out := new(UpdateCompanyDetailsResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/UpdateCompanyDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) StudentSignup(ctx context.Context, in *StudentSignupRequest, opts ...grpc.CallOption) (*StudentSignupResponse, error) {
	out := new(StudentSignupResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/StudentSignup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DoesEmailExist(ctx context.Context, in *DoesEmailExistRequest, opts ...grpc.CallOption) (*DoesEmailExistResponse, error) {
	out := new(DoesEmailExistResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/DoesEmailExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DoesUserNameExist(ctx context.Context, in *DoesUserNameExistRequest, opts ...grpc.CallOption) (*DoesUserNameExistResponse, error) {
	out := new(DoesUserNameExistResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/DoesUserNameExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SendInstallationCodeToDev(ctx context.Context, in *SendInstallationCodeToDevRequest, opts ...grpc.CallOption) (*SendInstallationCodeToDevResponse, error) {
	out := new(SendInstallationCodeToDevResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/SendInstallationCodeToDev", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) InviteStudents(ctx context.Context, in *InviteStudentsRequest, opts ...grpc.CallOption) (*InviteStudentsResponse, error) {
	out := new(InviteStudentsResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/InviteStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GenerateShareableLink(ctx context.Context, in *GenerateShareableLinkRequest, opts ...grpc.CallOption) (*GenerateShareableLinkResponse, error) {
	out := new(GenerateShareableLinkResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/GenerateShareableLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) IsSignupLinkValid(ctx context.Context, in *IsSignupLinkValidRequest, opts ...grpc.CallOption) (*IsSignupLinkValidResponse, error) {
	out := new(IsSignupLinkValidResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/IsSignupLinkValid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetRooms(ctx context.Context, in *GetRoomsRequest, opts ...grpc.CallOption) (*Rooms, error) {
	out := new(Rooms)
	err := c.cc.Invoke(ctx, "/users.UserService/GetRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/users.UserService/GetRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetPreviousRooms(ctx context.Context, in *GetPreviousRoomsRequest, opts ...grpc.CallOption) (*GetPreviousRoomsResponse, error) {
	out := new(GetPreviousRoomsResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/GetPreviousRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetRoomsByUsers(ctx context.Context, in *GetRoomsByUsersRequest, opts ...grpc.CallOption) (*Rooms, error) {
	out := new(Rooms)
	err := c.cc.Invoke(ctx, "/users.UserService/GetRoomsByUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error) {
	out := new(GetMessagesResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/GetMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetSearchMessages(ctx context.Context, in *GetSearchMessagesRequest, opts ...grpc.CallOption) (*Messages, error) {
	out := new(Messages)
	err := c.cc.Invoke(ctx, "/users.UserService/GetSearchMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetForm(ctx context.Context, in *GetFormRequest, opts ...grpc.CallOption) (*GetFormResponse, error) {
	out := new(GetFormResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/GetForm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*GetProfileResponse, error) {
	out := new(GetProfileResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetProfiles(ctx context.Context, in *GetProfilesRequest, opts ...grpc.CallOption) (*GetProfilesResponse, error) {
	out := new(GetProfilesResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/GetProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddProfile(ctx context.Context, in *AddProfileRequest, opts ...grpc.CallOption) (*AddProfileResponse, error) {
	out := new(AddProfileResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/AddProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	out := new(UpdateProfileResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/UpdateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteProfile(ctx context.Context, in *DeleteProfileRequest, opts ...grpc.CallOption) (*DeleteProfileResponse, error) {
	out := new(DeleteProfileResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/DeleteProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error) {
	out := new(GetNotificationsResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/GetNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAccounts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Accounts, error) {
	out := new(Accounts)
	err := c.cc.Invoke(ctx, "/users.UserService/GetAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) StudentPasswordReset(ctx context.Context, in *StudentPasswordResetRequest, opts ...grpc.CallOption) (*OperationStatus, error) {
	out := new(OperationStatus)
	err := c.cc.Invoke(ctx, "/users.UserService/StudentPasswordReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAccountInfo(ctx context.Context, in *GetAccountInfoRequest, opts ...grpc.CallOption) (*GetAccountInfoResponse, error) {
	out := new(GetAccountInfoResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/GetAccountInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) AddNewsletterEmail(ctx context.Context, in *AddNewsletterEmailRequest, opts ...grpc.CallOption) (*AddNewsletterEmailResponse, error) {
	out := new(AddNewsletterEmailResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/AddNewsletterEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteNewsletterEmail(ctx context.Context, in *DeleteNewsletterEmailRequest, opts ...grpc.CallOption) (*DeleteNewsletterEmailResponse, error) {
	out := new(DeleteNewsletterEmailResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/DeleteNewsletterEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SaveGetInTouch(ctx context.Context, in *SaveGetInTouchRequest, opts ...grpc.CallOption) (*SaveGetInTouchResponse, error) {
	out := new(SaveGetInTouchResponse)
	err := c.cc.Invoke(ctx, "/users.UserService/SaveGetInTouch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateStudentOnlineStatus(ctx context.Context, in *UpdateStudentOnlineStatusRequest, opts ...grpc.CallOption) (*OperationStatus, error) {
	out := new(OperationStatus)
	err := c.cc.Invoke(ctx, "/users.UserService/UpdateStudentOnlineStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	GetStudents(context.Context, *AccountID) (*Students, error)
	GetStudent(context.Context, *GetStudentRequest) (*Student, error)
	GetStudentsByDepartment(context.Context, *GetStudentsByDepartmentRequest) (*Students, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	GetUserByID(context.Context, *GetUserByIDRequest) (*User, error)
	AddStudent(context.Context, *StudentAddRequest) (*Student, error)
	UpdateStudentStatus(context.Context, *UpdateStudentStatusRequest) (*UpdateStudentStatusResponse, error)
	UpdateStudent(context.Context, *StudentUpdateRequest) (*Student, error)
	DeleteStudent(context.Context, *DeleteStudentRequest) (*StudentID, error)
	DeleteStudents(context.Context, *MultiStudentsDeleteRequest) (*OperationStatus, error)
	GetVisitors(context.Context, *AccountID) (*Visitors, error)
	GetVisitor(context.Context, *VisitorReq) (*Visitor, error)
	VisitorExists(context.Context, *VisitorReq) (*VisitorExistsRes, error)
	AddVisitor(context.Context, *Visitor) (*Visitor, error)
	GetDepartments(context.Context, *AccountID) (*Departments, error)
	GetDepartment(context.Context, *GetDepartmentRequest) (*Department, error)
	AddDepartment(context.Context, *AddDepartmentRequest) (*Department, error)
	UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*Department, error)
	UpdateDepartmentStatus(context.Context, *UpdateStatusDepartment) (*Department, error)
	DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*DepartmentID, error)
	DeleteDepartments(context.Context, *MultiDeleteRequest) (*OperationStatus, error)
	GetCustomer(context.Context, *AccountID) (*Customer, error)
	AddCustomerAccount(context.Context, *CustomerAccount) (*CustomerAccount, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	PasswordResetLinkHealth(context.Context, *PasswordResetLinkHealthRequest) (*PasswordResetLinkHealthResponse, error)
	ChangePasswordByLink(context.Context, *PasswordChangeByLinkRequest) (*PasswordChangeByLinkResponse, error)
	Signup(context.Context, *SignupRequest) (*SignupResponse, error)
	GetInvites(context.Context, *GetInvitesRequest) (*GetInvitesResponse, error)
	CancelInvite(context.Context, *CancelInviteRequest) (*CancelInviteResponse, error)
	UpdateCompanyDetails(context.Context, *UpdateCompanyDetailsRequest) (*UpdateCompanyDetailsResponse, error)
	StudentSignup(context.Context, *StudentSignupRequest) (*StudentSignupResponse, error)
	DoesEmailExist(context.Context, *DoesEmailExistRequest) (*DoesEmailExistResponse, error)
	DoesUserNameExist(context.Context, *DoesUserNameExistRequest) (*DoesUserNameExistResponse, error)
	SendInstallationCodeToDev(context.Context, *SendInstallationCodeToDevRequest) (*SendInstallationCodeToDevResponse, error)
	InviteStudents(context.Context, *InviteStudentsRequest) (*InviteStudentsResponse, error)
	GenerateShareableLink(context.Context, *GenerateShareableLinkRequest) (*GenerateShareableLinkResponse, error)
	IsSignupLinkValid(context.Context, *IsSignupLinkValidRequest) (*IsSignupLinkValidResponse, error)
	GetRooms(context.Context, *GetRoomsRequest) (*Rooms, error)
	GetRoom(context.Context, *GetRoomRequest) (*Room, error)
	GetPreviousRooms(context.Context, *GetPreviousRoomsRequest) (*GetPreviousRoomsResponse, error)
	GetRoomsByUsers(context.Context, *GetRoomsByUsersRequest) (*Rooms, error)
	GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error)
	GetSearchMessages(context.Context, *GetSearchMessagesRequest) (*Messages, error)
	GetForm(context.Context, *GetFormRequest) (*GetFormResponse, error)
	GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error)
	GetProfiles(context.Context, *GetProfilesRequest) (*GetProfilesResponse, error)
	AddProfile(context.Context, *AddProfileRequest) (*AddProfileResponse, error)
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	DeleteProfile(context.Context, *DeleteProfileRequest) (*DeleteProfileResponse, error)
	GetNotifications(context.Context, *GetNotificationsRequest) (*GetNotificationsResponse, error)
	GetAccounts(context.Context, *Empty) (*Accounts, error)
	StudentPasswordReset(context.Context, *StudentPasswordResetRequest) (*OperationStatus, error)
	GetAccountInfo(context.Context, *GetAccountInfoRequest) (*GetAccountInfoResponse, error)
	AddNewsletterEmail(context.Context, *AddNewsletterEmailRequest) (*AddNewsletterEmailResponse, error)
	DeleteNewsletterEmail(context.Context, *DeleteNewsletterEmailRequest) (*DeleteNewsletterEmailResponse, error)
	SaveGetInTouch(context.Context, *SaveGetInTouchRequest) (*SaveGetInTouchResponse, error)
	UpdateStudentOnlineStatus(context.Context, *UpdateStudentOnlineStatusRequest) (*OperationStatus, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) GetStudents(context.Context, *AccountID) (*Students, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudents not implemented")
}
func (UnimplementedUserServiceServer) GetStudent(context.Context, *GetStudentRequest) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudent not implemented")
}
func (UnimplementedUserServiceServer) GetStudentsByDepartment(context.Context, *GetStudentsByDepartmentRequest) (*Students, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStudentsByDepartment not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) GetUserByID(context.Context, *GetUserByIDRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedUserServiceServer) AddStudent(context.Context, *StudentAddRequest) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStudent not implemented")
}
func (UnimplementedUserServiceServer) UpdateStudentStatus(context.Context, *UpdateStudentStatusRequest) (*UpdateStudentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudentStatus not implemented")
}
func (UnimplementedUserServiceServer) UpdateStudent(context.Context, *StudentUpdateRequest) (*Student, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudent not implemented")
}
func (UnimplementedUserServiceServer) DeleteStudent(context.Context, *DeleteStudentRequest) (*StudentID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudent not implemented")
}
func (UnimplementedUserServiceServer) DeleteStudents(context.Context, *MultiStudentsDeleteRequest) (*OperationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudents not implemented")
}
func (UnimplementedUserServiceServer) GetVisitors(context.Context, *AccountID) (*Visitors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVisitors not implemented")
}
func (UnimplementedUserServiceServer) GetVisitor(context.Context, *VisitorReq) (*Visitor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVisitor not implemented")
}
func (UnimplementedUserServiceServer) VisitorExists(context.Context, *VisitorReq) (*VisitorExistsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VisitorExists not implemented")
}
func (UnimplementedUserServiceServer) AddVisitor(context.Context, *Visitor) (*Visitor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVisitor not implemented")
}
func (UnimplementedUserServiceServer) GetDepartments(context.Context, *AccountID) (*Departments, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartments not implemented")
}
func (UnimplementedUserServiceServer) GetDepartment(context.Context, *GetDepartmentRequest) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartment not implemented")
}
func (UnimplementedUserServiceServer) AddDepartment(context.Context, *AddDepartmentRequest) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDepartment not implemented")
}
func (UnimplementedUserServiceServer) UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (UnimplementedUserServiceServer) UpdateDepartmentStatus(context.Context, *UpdateStatusDepartment) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartmentStatus not implemented")
}
func (UnimplementedUserServiceServer) DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*DepartmentID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedUserServiceServer) DeleteDepartments(context.Context, *MultiDeleteRequest) (*OperationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartments not implemented")
}
func (UnimplementedUserServiceServer) GetCustomer(context.Context, *AccountID) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (UnimplementedUserServiceServer) AddCustomerAccount(context.Context, *CustomerAccount) (*CustomerAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomerAccount not implemented")
}
func (UnimplementedUserServiceServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedUserServiceServer) PasswordResetLinkHealth(context.Context, *PasswordResetLinkHealthRequest) (*PasswordResetLinkHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordResetLinkHealth not implemented")
}
func (UnimplementedUserServiceServer) ChangePasswordByLink(context.Context, *PasswordChangeByLinkRequest) (*PasswordChangeByLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePasswordByLink not implemented")
}
func (UnimplementedUserServiceServer) Signup(context.Context, *SignupRequest) (*SignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signup not implemented")
}
func (UnimplementedUserServiceServer) GetInvites(context.Context, *GetInvitesRequest) (*GetInvitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvites not implemented")
}
func (UnimplementedUserServiceServer) CancelInvite(context.Context, *CancelInviteRequest) (*CancelInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelInvite not implemented")
}
func (UnimplementedUserServiceServer) UpdateCompanyDetails(context.Context, *UpdateCompanyDetailsRequest) (*UpdateCompanyDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanyDetails not implemented")
}
func (UnimplementedUserServiceServer) StudentSignup(context.Context, *StudentSignupRequest) (*StudentSignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentSignup not implemented")
}
func (UnimplementedUserServiceServer) DoesEmailExist(context.Context, *DoesEmailExistRequest) (*DoesEmailExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoesEmailExist not implemented")
}
func (UnimplementedUserServiceServer) DoesUserNameExist(context.Context, *DoesUserNameExistRequest) (*DoesUserNameExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoesUserNameExist not implemented")
}
func (UnimplementedUserServiceServer) SendInstallationCodeToDev(context.Context, *SendInstallationCodeToDevRequest) (*SendInstallationCodeToDevResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendInstallationCodeToDev not implemented")
}
func (UnimplementedUserServiceServer) InviteStudents(context.Context, *InviteStudentsRequest) (*InviteStudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteStudents not implemented")
}
func (UnimplementedUserServiceServer) GenerateShareableLink(context.Context, *GenerateShareableLinkRequest) (*GenerateShareableLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateShareableLink not implemented")
}
func (UnimplementedUserServiceServer) IsSignupLinkValid(context.Context, *IsSignupLinkValidRequest) (*IsSignupLinkValidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSignupLinkValid not implemented")
}
func (UnimplementedUserServiceServer) GetRooms(context.Context, *GetRoomsRequest) (*Rooms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRooms not implemented")
}
func (UnimplementedUserServiceServer) GetRoom(context.Context, *GetRoomRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedUserServiceServer) GetPreviousRooms(context.Context, *GetPreviousRoomsRequest) (*GetPreviousRoomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreviousRooms not implemented")
}
func (UnimplementedUserServiceServer) GetRoomsByUsers(context.Context, *GetRoomsByUsersRequest) (*Rooms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomsByUsers not implemented")
}
func (UnimplementedUserServiceServer) GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedUserServiceServer) GetSearchMessages(context.Context, *GetSearchMessagesRequest) (*Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchMessages not implemented")
}
func (UnimplementedUserServiceServer) GetForm(context.Context, *GetFormRequest) (*GetFormResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetForm not implemented")
}
func (UnimplementedUserServiceServer) GetProfile(context.Context, *GetProfileRequest) (*GetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedUserServiceServer) GetProfiles(context.Context, *GetProfilesRequest) (*GetProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfiles not implemented")
}
func (UnimplementedUserServiceServer) AddProfile(context.Context, *AddProfileRequest) (*AddProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProfile not implemented")
}
func (UnimplementedUserServiceServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedUserServiceServer) DeleteProfile(context.Context, *DeleteProfileRequest) (*DeleteProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProfile not implemented")
}
func (UnimplementedUserServiceServer) GetNotifications(context.Context, *GetNotificationsRequest) (*GetNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedUserServiceServer) GetAccounts(context.Context, *Empty) (*Accounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedUserServiceServer) StudentPasswordReset(context.Context, *StudentPasswordResetRequest) (*OperationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StudentPasswordReset not implemented")
}
func (UnimplementedUserServiceServer) GetAccountInfo(context.Context, *GetAccountInfoRequest) (*GetAccountInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountInfo not implemented")
}
func (UnimplementedUserServiceServer) AddNewsletterEmail(context.Context, *AddNewsletterEmailRequest) (*AddNewsletterEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewsletterEmail not implemented")
}
func (UnimplementedUserServiceServer) DeleteNewsletterEmail(context.Context, *DeleteNewsletterEmailRequest) (*DeleteNewsletterEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNewsletterEmail not implemented")
}
func (UnimplementedUserServiceServer) SaveGetInTouch(context.Context, *SaveGetInTouchRequest) (*SaveGetInTouchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveGetInTouch not implemented")
}
func (UnimplementedUserServiceServer) UpdateStudentOnlineStatus(context.Context, *UpdateStudentOnlineStatusRequest) (*OperationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudentOnlineStatus not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_GetStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetStudents(ctx, req.(*AccountID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetStudent(ctx, req.(*GetStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetStudentsByDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStudentsByDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetStudentsByDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetStudentsByDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetStudentsByDepartment(ctx, req.(*GetStudentsByDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByID(ctx, req.(*GetUserByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/AddStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddStudent(ctx, req.(*StudentAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateStudentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateStudentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/UpdateStudentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateStudentStatus(ctx, req.(*UpdateStudentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/UpdateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateStudent(ctx, req.(*StudentUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/DeleteStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteStudent(ctx, req.(*DeleteStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiStudentsDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/DeleteStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteStudents(ctx, req.(*MultiStudentsDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetVisitors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetVisitors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetVisitors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetVisitors(ctx, req.(*AccountID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisitorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetVisitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetVisitor(ctx, req.(*VisitorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_VisitorExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VisitorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).VisitorExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/VisitorExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).VisitorExists(ctx, req.(*VisitorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddVisitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Visitor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddVisitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/AddVisitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddVisitor(ctx, req.(*Visitor))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetDepartments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetDepartments(ctx, req.(*AccountID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetDepartment(ctx, req.(*GetDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/AddDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddDepartment(ctx, req.(*AddDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/UpdateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateDepartment(ctx, req.(*UpdateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateDepartmentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStatusDepartment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateDepartmentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/UpdateDepartmentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateDepartmentStatus(ctx, req.(*UpdateStatusDepartment))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/DeleteDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteDepartment(ctx, req.(*DeleteDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/DeleteDepartments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteDepartments(ctx, req.(*MultiDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetCustomer(ctx, req.(*AccountID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddCustomerAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddCustomerAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/AddCustomerAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddCustomerAccount(ctx, req.(*CustomerAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_PasswordResetLinkHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordResetLinkHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).PasswordResetLinkHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/PasswordResetLinkHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).PasswordResetLinkHealth(ctx, req.(*PasswordResetLinkHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangePasswordByLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordChangeByLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangePasswordByLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/ChangePasswordByLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangePasswordByLink(ctx, req.(*PasswordChangeByLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/Signup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Signup(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetInvites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetInvites(ctx, req.(*GetInvitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CancelInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CancelInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/CancelInvite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CancelInvite(ctx, req.(*CancelInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateCompanyDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateCompanyDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/UpdateCompanyDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateCompanyDetails(ctx, req.(*UpdateCompanyDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_StudentSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentSignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).StudentSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/StudentSignup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).StudentSignup(ctx, req.(*StudentSignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DoesEmailExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoesEmailExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DoesEmailExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/DoesEmailExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DoesEmailExist(ctx, req.(*DoesEmailExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DoesUserNameExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoesUserNameExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DoesUserNameExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/DoesUserNameExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DoesUserNameExist(ctx, req.(*DoesUserNameExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SendInstallationCodeToDev_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendInstallationCodeToDevRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SendInstallationCodeToDev(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/SendInstallationCodeToDev",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SendInstallationCodeToDev(ctx, req.(*SendInstallationCodeToDevRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_InviteStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteStudentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).InviteStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/InviteStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).InviteStudents(ctx, req.(*InviteStudentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GenerateShareableLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateShareableLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GenerateShareableLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GenerateShareableLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GenerateShareableLink(ctx, req.(*GenerateShareableLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_IsSignupLinkValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsSignupLinkValidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).IsSignupLinkValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/IsSignupLinkValid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).IsSignupLinkValid(ctx, req.(*IsSignupLinkValidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetRooms(ctx, req.(*GetRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetRoom(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetPreviousRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreviousRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetPreviousRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetPreviousRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetPreviousRooms(ctx, req.(*GetPreviousRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetRoomsByUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomsByUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetRoomsByUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetRoomsByUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetRoomsByUsers(ctx, req.(*GetRoomsByUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetMessages(ctx, req.(*GetMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetSearchMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetSearchMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetSearchMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetSearchMessages(ctx, req.(*GetSearchMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetForm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFormRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetForm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetForm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetForm(ctx, req.(*GetFormRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetProfiles(ctx, req.(*GetProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/AddProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddProfile(ctx, req.(*AddProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/DeleteProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteProfile(ctx, req.(*DeleteProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetNotifications(ctx, req.(*GetNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAccounts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_StudentPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentPasswordResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).StudentPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/StudentPasswordReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).StudentPasswordReset(ctx, req.(*StudentPasswordResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAccountInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAccountInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/GetAccountInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAccountInfo(ctx, req.(*GetAccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_AddNewsletterEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewsletterEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddNewsletterEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/AddNewsletterEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddNewsletterEmail(ctx, req.(*AddNewsletterEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteNewsletterEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNewsletterEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteNewsletterEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/DeleteNewsletterEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteNewsletterEmail(ctx, req.(*DeleteNewsletterEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SaveGetInTouch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveGetInTouchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SaveGetInTouch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/SaveGetInTouch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SaveGetInTouch(ctx, req.(*SaveGetInTouchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateStudentOnlineStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentOnlineStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateStudentOnlineStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.UserService/UpdateStudentOnlineStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateStudentOnlineStatus(ctx, req.(*UpdateStudentOnlineStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStudents",
			Handler:    _UserService_GetStudents_Handler,
		},
		{
			MethodName: "GetStudent",
			Handler:    _UserService_GetStudent_Handler,
		},
		{
			MethodName: "GetStudentsByDepartment",
			Handler:    _UserService_GetStudentsByDepartment_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _UserService_GetUserByID_Handler,
		},
		{
			MethodName: "AddStudent",
			Handler:    _UserService_AddStudent_Handler,
		},
		{
			MethodName: "UpdateStudentStatus",
			Handler:    _UserService_UpdateStudentStatus_Handler,
		},
		{
			MethodName: "UpdateStudent",
			Handler:    _UserService_UpdateStudent_Handler,
		},
		{
			MethodName: "DeleteStudent",
			Handler:    _UserService_DeleteStudent_Handler,
		},
		{
			MethodName: "DeleteStudents",
			Handler:    _UserService_DeleteStudents_Handler,
		},
		{
			MethodName: "GetVisitors",
			Handler:    _UserService_GetVisitors_Handler,
		},
		{
			MethodName: "GetVisitor",
			Handler:    _UserService_GetVisitor_Handler,
		},
		{
			MethodName: "VisitorExists",
			Handler:    _UserService_VisitorExists_Handler,
		},
		{
			MethodName: "AddVisitor",
			Handler:    _UserService_AddVisitor_Handler,
		},
		{
			MethodName: "GetDepartments",
			Handler:    _UserService_GetDepartments_Handler,
		},
		{
			MethodName: "GetDepartment",
			Handler:    _UserService_GetDepartment_Handler,
		},
		{
			MethodName: "AddDepartment",
			Handler:    _UserService_AddDepartment_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _UserService_UpdateDepartment_Handler,
		},
		{
			MethodName: "UpdateDepartmentStatus",
			Handler:    _UserService_UpdateDepartmentStatus_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _UserService_DeleteDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartments",
			Handler:    _UserService_DeleteDepartments_Handler,
		},
		{
			MethodName: "GetCustomer",
			Handler:    _UserService_GetCustomer_Handler,
		},
		{
			MethodName: "AddCustomerAccount",
			Handler:    _UserService_AddCustomerAccount_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _UserService_ResetPassword_Handler,
		},
		{
			MethodName: "PasswordResetLinkHealth",
			Handler:    _UserService_PasswordResetLinkHealth_Handler,
		},
		{
			MethodName: "ChangePasswordByLink",
			Handler:    _UserService_ChangePasswordByLink_Handler,
		},
		{
			MethodName: "Signup",
			Handler:    _UserService_Signup_Handler,
		},
		{
			MethodName: "GetInvites",
			Handler:    _UserService_GetInvites_Handler,
		},
		{
			MethodName: "CancelInvite",
			Handler:    _UserService_CancelInvite_Handler,
		},
		{
			MethodName: "UpdateCompanyDetails",
			Handler:    _UserService_UpdateCompanyDetails_Handler,
		},
		{
			MethodName: "StudentSignup",
			Handler:    _UserService_StudentSignup_Handler,
		},
		{
			MethodName: "DoesEmailExist",
			Handler:    _UserService_DoesEmailExist_Handler,
		},
		{
			MethodName: "DoesUserNameExist",
			Handler:    _UserService_DoesUserNameExist_Handler,
		},
		{
			MethodName: "SendInstallationCodeToDev",
			Handler:    _UserService_SendInstallationCodeToDev_Handler,
		},
		{
			MethodName: "InviteStudents",
			Handler:    _UserService_InviteStudents_Handler,
		},
		{
			MethodName: "GenerateShareableLink",
			Handler:    _UserService_GenerateShareableLink_Handler,
		},
		{
			MethodName: "IsSignupLinkValid",
			Handler:    _UserService_IsSignupLinkValid_Handler,
		},
		{
			MethodName: "GetRooms",
			Handler:    _UserService_GetRooms_Handler,
		},
		{
			MethodName: "GetRoom",
			Handler:    _UserService_GetRoom_Handler,
		},
		{
			MethodName: "GetPreviousRooms",
			Handler:    _UserService_GetPreviousRooms_Handler,
		},
		{
			MethodName: "GetRoomsByUsers",
			Handler:    _UserService_GetRoomsByUsers_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _UserService_GetMessages_Handler,
		},
		{
			MethodName: "GetSearchMessages",
			Handler:    _UserService_GetSearchMessages_Handler,
		},
		{
			MethodName: "GetForm",
			Handler:    _UserService_GetForm_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _UserService_GetProfile_Handler,
		},
		{
			MethodName: "GetProfiles",
			Handler:    _UserService_GetProfiles_Handler,
		},
		{
			MethodName: "AddProfile",
			Handler:    _UserService_AddProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _UserService_UpdateProfile_Handler,
		},
		{
			MethodName: "DeleteProfile",
			Handler:    _UserService_DeleteProfile_Handler,
		},
		{
			MethodName: "GetNotifications",
			Handler:    _UserService_GetNotifications_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _UserService_GetAccounts_Handler,
		},
		{
			MethodName: "StudentPasswordReset",
			Handler:    _UserService_StudentPasswordReset_Handler,
		},
		{
			MethodName: "GetAccountInfo",
			Handler:    _UserService_GetAccountInfo_Handler,
		},
		{
			MethodName: "AddNewsletterEmail",
			Handler:    _UserService_AddNewsletterEmail_Handler,
		},
		{
			MethodName: "DeleteNewsletterEmail",
			Handler:    _UserService_DeleteNewsletterEmail_Handler,
		},
		{
			MethodName: "SaveGetInTouch",
			Handler:    _UserService_SaveGetInTouch_Handler,
		},
		{
			MethodName: "UpdateStudentOnlineStatus",
			Handler:    _UserService_UpdateStudentOnlineStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/users/user.proto",
}
